// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product{
  id                    Int @id @default(autoincrement())
  name                  String
  price                 Float
  description           String
  image                 String
  category              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?

  @@map("products")
}


model Cart{
  id                    Int @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  productId             Int
  quantity              Int
  name                  String
  price                 Float
  image                 String
  ordered               Boolean @default(false)

  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?

  @@map("carts")
}

model OrderedProducts{
  id                    Int @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cartId                Int
  quantity              Int
  name                  String
  price                 Float
  image                 String
  delivered             Boolean @default(false)
  deliveredAt           DateTime?
  orderedGroupDate      DateTime?

  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?

  @@map("ordered_products")
}

model UserAddress{
  id                    Int @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  address               String
  city                  String
  state                 String
  country               String
  zip                   String

  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?

  @@map("user_addresses")
}


model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  role                  Role       @default(USER)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  products              Product[]
  carts                 Cart[]
  orderedProducts       OrderedProducts[]
  userAddresses         UserAddress[]

  @@map("users")
}
model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  type               String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?


  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @db.Text @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


enum Role {
  ADMIN
  USER
}